// This file is generated by Firebase Studio.

'use server';

/**
 * @fileOverview A Genkit flow that suggests relevant service alerts based on the user's query.
 *
 * - suggestRelevantAlerts - A function that suggests service alerts.
 * - SuggestRelevantAlertsInput - The input type for the suggestRelevantAlerts function.
 * - SuggestRelevantAlertsOutput - The return type for the suggestRelevantAlerts function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestRelevantAlertsInputSchema = z.object({
  query: z.string().describe('The user query related to a transit route.'),
  alerts: z.array(z.string()).describe('A list of current service alerts.'),
});
export type SuggestRelevantAlertsInput = z.infer<typeof SuggestRelevantAlertsInputSchema>;

const SuggestRelevantAlertsOutputSchema = z.array(z.string()).describe('A list of relevant service alerts.');
export type SuggestRelevantAlertsOutput = z.infer<typeof SuggestRelevantAlertsOutputSchema>;

export async function suggestRelevantAlerts(input: SuggestRelevantAlertsInput): Promise<SuggestRelevantAlertsOutput> {
  return suggestRelevantAlertsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestRelevantAlertsPrompt',
  input: {schema: SuggestRelevantAlertsInputSchema},
  output: {schema: SuggestRelevantAlertsOutputSchema},
  prompt: `You are an AI assistant that helps users find relevant service alerts for their transit routes.

  Given the user's query and a list of service alerts, identify the alerts that are most relevant to the user's query.
  Only return alerts that are DIRECTLY relevant to the user's query about a route.

  User Query: {{{query}}}
  Service Alerts: {{#each alerts}}{{{this}}}\n{{/each}}

  Relevant Alerts:`, // Ensure output is a simple array of strings.
});

const suggestRelevantAlertsFlow = ai.defineFlow(
  {
    name: 'suggestRelevantAlertsFlow',
    inputSchema: SuggestRelevantAlertsInputSchema,
    outputSchema: SuggestRelevantAlertsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
